{"mappings":"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","sources":["node_modules/htm/dist/htm.module.js","node_modules/vhtml/src/empty-tags.js","node_modules/vhtml/src/vhtml.js","node_modules/@portabletext/toolkit/src/asserters.ts","node_modules/@portabletext/toolkit/src/sortMarksByOccurences.ts","node_modules/@portabletext/toolkit/src/buildMarksTree.ts","node_modules/@portabletext/toolkit/src/nestLists.ts","node_modules/@portabletext/toolkit/src/spanToPlainText.ts","node_modules/@portabletext/to-html/src/escape.ts","node_modules/@portabletext/to-html/src/components/marks.ts","node_modules/@portabletext/to-html/src/warnings.ts","node_modules/@portabletext/to-html/src/components/unknown.ts","node_modules/@portabletext/to-html/src/components/defaults.ts","node_modules/@portabletext/to-html/src/components/list.ts","node_modules/@portabletext/to-html/src/components/merge.ts","node_modules/@portabletext/to-html/src/to-html.ts","node_modules/@sanity/image-url/src/parseAssetId.ts","node_modules/@sanity/image-url/src/parseSource.ts","node_modules/@sanity/image-url/src/urlForImage.ts","node_modules/@sanity/image-url/src/builder.ts","src/resourceApp.js"],"sourcesContent":["var n=function(t,s,r,e){var u;s[0]=0;for(var h=1;h<s.length;h++){var p=s[h++],a=s[h]?(s[0]|=p?1:2,r[s[h++]]):s[++h];3===p?e[0]=a:4===p?e[1]=Object.assign(e[1]||{},a):5===p?(e[1]=e[1]||{})[s[++h]]=a:6===p?e[1][s[++h]]+=a+\"\":p?(u=t.apply(a,n(t,a,r,[\"\",null])),e.push(u),a[0]?s[0]|=2:(s[h-2]=0,s[h]=u)):e.push(a)}return e},t=new Map;export default function(s){var r=t.get(this);return r||(r=new Map,t.set(this,r)),(r=n(this,r.get(s)||(r.set(s,r=function(n){for(var t,s,r=1,e=\"\",u=\"\",h=[0],p=function(n){1===r&&(n||(e=e.replace(/^\\s*\\n\\s*|\\s*\\n\\s*$/g,\"\")))?h.push(0,n,e):3===r&&(n||e)?(h.push(3,n,e),r=2):2===r&&\"...\"===e&&n?h.push(4,n,0):2===r&&e&&!n?h.push(5,0,!0,e):r>=5&&((e||!n&&5===r)&&(h.push(r,0,e,s),r=6),n&&(h.push(r,n,0,s),r=6)),e=\"\"},a=0;a<n.length;a++){a&&(1===r&&p(),p(a));for(var l=0;l<n[a].length;l++)t=n[a][l],1===r?\"<\"===t?(p(),h=[h],r=3):e+=t:4===r?\"--\"===e&&\">\"===t?(r=1,e=\"\"):e=t+e[0]:u?t===u?u=\"\":e+=t:'\"'===t||\"'\"===t?u=t:\">\"===t?(p(),r=1):r&&(\"=\"===t?(r=5,s=e,e=\"\"):\"/\"===t&&(r<5||\">\"===n[a][l+1])?(p(),3===r&&(h=h[0]),r=h,(h=h[0]).push(2,0,r),r=0):\" \"===t||\"\\t\"===t||\"\\n\"===t||\"\\r\"===t?(p(),r=2):e+=t),3===r&&\"!--\"===e&&(r=4,h=h[0])}return p(),h}(s)),r),arguments,[])).length>1?r:r[0]}\n","export default [\n\t'area',\n\t'base',\n\t'br',\n\t'col',\n\t'command',\n\t'embed',\n\t'hr',\n\t'img',\n\t'input',\n\t'keygen',\n\t'link',\n\t'meta',\n\t'param',\n\t'source',\n\t'track',\n\t'wbr'\n];","import emptyTags from './empty-tags';\n\n// escape an attribute\nlet esc = str => String(str).replace(/[&<>\"']/g, s=>`&${map[s]};`);\nlet map = {'&':'amp','<':'lt','>':'gt','\"':'quot',\"'\":'apos'};\nlet setInnerHTMLAttr = 'dangerouslySetInnerHTML';\nlet DOMAttributeNames = {\n\tclassName: 'class',\n\thtmlFor: 'for'\n};\n\nlet sanitized = {};\n\n/** Hyperscript reviver that constructs a sanitized HTML string. */\nexport default function h(name, attrs) {\n\tlet stack=[], s = '';\n\tattrs = attrs || {};\n\tfor (let i=arguments.length; i-- > 2; ) {\n\t\tstack.push(arguments[i]);\n\t}\n\n\t// Sortof component support!\n\tif (typeof name==='function') {\n\t\tattrs.children = stack.reverse();\n\t\treturn name(attrs);\n\t\t// return name(attrs, stack.reverse());\n\t}\n\n\tif (name) {\n\t\ts += '<' + name;\n\t\tif (attrs) for (let i in attrs) {\n\t\t\tif (attrs[i]!==false && attrs[i]!=null && i !== setInnerHTMLAttr) {\n\t\t\t\ts += ` ${DOMAttributeNames[i] ? DOMAttributeNames[i] : esc(i)}=\"${esc(attrs[i])}\"`;\n\t\t\t}\n\t\t}\n\t\ts += '>';\n\t}\n\n\tif (emptyTags.indexOf(name) === -1) {\n\t\tif (attrs[setInnerHTMLAttr]) {\n\t\t\ts += attrs[setInnerHTMLAttr].__html;\n\t\t}\n\t\telse while (stack.length) {\n\t\t\tlet child = stack.pop();\n\t\t\tif (child) {\n\t\t\t\tif (child.pop) {\n\t\t\t\t\tfor (let i=child.length; i--; ) stack.push(child[i]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ts += sanitized[child]===true ? child : esc(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ts += name ? `</${name}>` : '';\n\t}\n\n\tsanitized[s] = true;\n\treturn s;\n}\n","import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\nimport type {ToolkitNestedPortableTextSpan, ToolkitPortableTextList, ToolkitTextNode} from './types'\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text span.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text span, otherwise false\n */\nexport function isPortableTextSpan(\n  node: ArbitraryTypedObject | PortableTextSpan\n): node is PortableTextSpan {\n  return (\n    node._type === 'span' &&\n    'text' in node &&\n    typeof node.text === 'string' &&\n    (typeof node.marks === 'undefined' ||\n      (Array.isArray(node.marks) && node.marks.every((mark) => typeof mark === 'string')))\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text block.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text block, otherwise false\n */\nexport function isPortableTextBlock(\n  node: PortableTextBlock | TypedObject\n): node is PortableTextBlock {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type === 'string' &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== '@' &&\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!('markDefs' in node) ||\n      (Array.isArray(node.markDefs) &&\n        // Every mark definition needs to have an `_key` to be mappable in child spans\n        node.markDefs.every((def) => typeof def._key === 'string'))) &&\n    // `children` is required and needs to be an array\n    'children' in node &&\n    Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child === 'object' && '_type' in child)\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted portable list item block.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text list item block, otherwise false\n */\nexport function isPortableTextListItemBlock(\n  block: PortableTextBlock | TypedObject\n): block is PortableTextListItemBlock {\n  return (\n    isPortableTextBlock(block) &&\n    'listItem' in block &&\n    typeof block.listItem === 'string' &&\n    (typeof block.level === 'undefined' || typeof block.level === 'number')\n  )\n}\n\n/**\n * Loose check to determine if block is a toolkit list node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param block - Block to check\n * @returns True if toolkit list, otherwise false\n */\nexport function isPortableTextToolkitList(\n  block: TypedObject | ToolkitPortableTextList\n): block is ToolkitPortableTextList {\n  return block._type === '@list'\n}\n\n/**\n * Loose check to determine if span is a toolkit span node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param block - Span to check\n * @returns True if toolkit span, otherwise false\n */\nexport function isPortableTextToolkitSpan(\n  span: TypedObject | ToolkitNestedPortableTextSpan\n): span is ToolkitNestedPortableTextSpan {\n  return span._type === '@span'\n}\n\n/**\n * Loose check to determine if node is a toolkit text node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param block - Node to check\n * @returns True if toolkit text node, otherwise false\n */\nexport function isPortableTextToolkitTextNode(\n  node: TypedObject | ToolkitTextNode\n): node is ToolkitTextNode {\n  return node._type === '@text'\n}\n","import type {PortableTextSpan, TypedObject} from '@portabletext/types'\nimport {isPortableTextSpan} from './asserters'\n\nconst knownDecorators = ['strong', 'em', 'code', 'underline', 'strike-through']\n\n/**\n * Figures out the optimal order of marks, in order to minimize the amount of\n * nesting/repeated elements in environments such as HTML. For instance, a naive\n * implementation might render something like:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded text</strong>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a> and some bolded text\n * </strong>\n * ```\n *\n * This is particularly necessary for cases like links, where you don't want multiple\n * individual links for different segments of the link text, even if parts of it are\n * bolded/italicized.\n *\n * This function is meant to be used like: `block.children.map(sortMarksByOccurences)`,\n * and is used internally in {@link buildMarksTree | `buildMarksTree()`}.\n *\n * The marks are sorted in the following order:\n *\n *  1. Marks that are shared amongst the most adjacent siblings\n *  2. Non-default marks (links, custom metadata)\n *  3. Decorators (bold, emphasis, code etc), in a predefined, preferred order\n *\n * @param span - The current span to sort\n * @param index - The index of the current span within the block\n * @param blockChildren - All children of the block being sorted\n * @returns Array of decorators and annotations, sorted by \"most adjacent siblings\"\n */\nexport function sortMarksByOccurences(\n  span: PortableTextSpan | TypedObject,\n  index: number,\n  blockChildren: (PortableTextSpan | TypedObject)[]\n): string[] {\n  if (!isPortableTextSpan(span) || !span.marks) {\n    return []\n  }\n\n  if (!span.marks.length) {\n    return []\n  }\n\n  // Slicing because we'll be sorting with `sort()`, which mutates\n  const marks = span.marks.slice()\n  const occurences: Record<string, number> = {}\n  marks.forEach((mark) => {\n    occurences[mark] = 1\n\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex]\n\n      if (\n        sibling &&\n        isPortableTextSpan(sibling) &&\n        Array.isArray(sibling.marks) &&\n        sibling.marks.indexOf(mark) !== -1\n      ) {\n        occurences[mark]++\n      } else {\n        break\n      }\n    }\n  })\n\n  return marks.sort((markA, markB) => sortMarks(occurences, markA, markB))\n}\n\nfunction sortMarks<U extends string, T extends Record<U, number>>(\n  occurences: T,\n  markA: U,\n  markB: U\n): number {\n  const aOccurences = occurences[markA]\n  const bOccurences = occurences[markB]\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences\n  }\n\n  const aKnownPos = knownDecorators.indexOf(markA)\n  const bKnownPos = knownDecorators.indexOf(markB)\n\n  // Sort known decorators last\n  if (aKnownPos !== bKnownPos) {\n    return aKnownPos - bKnownPos\n  }\n\n  // Sort other marks simply by key\n  return markA.localeCompare(markB)\n}\n","import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextMarkDefinition,\n} from '@portabletext/types'\nimport type {ToolkitNestedPortableTextSpan, ToolkitTextNode} from './types'\nimport {isPortableTextSpan} from './asserters'\nimport {sortMarksByOccurences} from './sortMarksByOccurences'\n\n/**\n * Takes a Portable Text block and returns a nested tree of nodes optimized for rendering\n * in HTML-like environments where you want marks/annotations to be nested inside of eachother.\n * For instance, a naive span-by-span rendering might yield:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded and </strong>\n * <em><strong>italicized text</strong></em>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a>\n *   and some bolded and <em>italicized text</em>\n * </strong>\n * ```\n *\n * Note that since \"native\" Portable Text spans cannot be nested,\n * this function returns an array of \"toolkit specific\" types:\n * {@link ToolkitTextNode | `@text`} and {@link ToolkitNestedPortableTextSpan | `@span` }.\n *\n * The toolkit-specific type can hold both types, as well as any arbitrary inline objects,\n * creating an actual tree.\n *\n * @param block - The Portable Text block to create a tree of nodes from\n * @returns Array of (potentially) nested spans, text nodes and/or arbitrary inline objects\n */\nexport function buildMarksTree<M extends PortableTextMarkDefinition = PortableTextMarkDefinition>(\n  block: PortableTextBlock<M>\n): (ToolkitNestedPortableTextSpan<M> | ToolkitTextNode | ArbitraryTypedObject)[] {\n  const {children, markDefs = []} = block\n  if (!children || !children.length) {\n    return []\n  }\n\n  const sortedMarks = children.map(sortMarksByOccurences)\n\n  const rootNode: ToolkitNestedPortableTextSpan<M> = {\n    _type: '@span',\n    children: [],\n    markType: '<unknown>',\n  }\n\n  let nodeStack: ToolkitNestedPortableTextSpan<M>[] = [rootNode]\n\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i]\n    if (!span) {\n      continue\n    }\n\n    const marksNeeded = sortedMarks[i] || []\n    let pos = 1\n\n    // Start at position one. Root is always plain and should never be removed\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = nodeStack[pos]?.markKey || ''\n        const index = marksNeeded.indexOf(mark)\n\n        if (index === -1) {\n          break\n        }\n\n        marksNeeded.splice(index, 1)\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos)\n\n    // Add needed nodes\n    let currentNode = nodeStack[nodeStack.length - 1]\n    if (!currentNode) {\n      continue\n    }\n\n    for (const markKey of marksNeeded) {\n      const markDef = markDefs.find((def) => def._key === markKey)\n      const markType = markDef ? markDef._type : markKey\n      const node: ToolkitNestedPortableTextSpan<M> = {\n        _type: '@span',\n        _key: span._key,\n        children: [],\n        markDef,\n        markType,\n        markKey,\n      }\n\n      currentNode.children.push(node)\n      nodeStack.push(node)\n      currentNode = node\n    }\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isPortableTextSpan(span)) {\n      const lines = span.text.split('\\n')\n      for (let line = lines.length; line-- > 1; ) {\n        lines.splice(line, 0, '\\n')\n      }\n\n      currentNode.children = currentNode.children.concat(\n        lines.map((text) => ({_type: '@text', text}))\n      )\n    } else {\n      // This is some other inline object, not a text span\n      currentNode.children = currentNode.children.concat(span)\n    }\n  }\n\n  return rootNode.children\n}\n","import type {PortableTextBlock, PortableTextListItemBlock, TypedObject} from '@portabletext/types'\nimport type {\n  ToolkitListNestMode,\n  ToolkitPortableTextDirectList,\n  ToolkitPortableTextHtmlList,\n  ToolkitPortableTextList,\n  ToolkitPortableTextListItem,\n} from './types'\nimport {\n  isPortableTextListItemBlock,\n  isPortableTextSpan,\n  isPortableTextToolkitList,\n} from './asserters'\n\nexport type ToolkitNestListsOutputNode<T> =\n  | T\n  | ToolkitPortableTextHtmlList\n  | ToolkitPortableTextDirectList\n\n/**\n * Takes an array of blocks and returns an array of nodes optimized for rendering in HTML-like\n * environment, where lists are nested inside of eachother instead of appearing \"flat\" as in\n * native Portable Text data structures.\n *\n * Note that the list node is not a native Portable Text node type, and thus is represented\n * using the {@link ToolkitPortableTextList | `@list`} type name (`{_type: '@list'}`).\n *\n * The nesting can be configured in two modes:\n *\n * - `direct`: deeper list nodes will appear as a direct child of the parent list\n * - `html`, deeper list nodes will appear as a child of the last _list item_ in the parent list\n *\n * When using `direct`, all list nodes will be of type {@link ToolkitPortableTextDirectList},\n * while with `html` they will be of type {@link ToolkitPortableTextHtmlList}\n *\n * These modes are available as {@link LIST_NEST_MODE_HTML} and {@link LIST_NEST_MODE_DIRECT}.\n *\n * @param blocks - Array of Portable Text blocks and other arbitrary types\n * @param mode - Mode to use for nesting, `direct` or `html`\n * @returns Array of potentially nested nodes optimized for rendering\n */\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct'\n): (T | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'html'\n): (T | ToolkitPortableTextHtmlList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct' | 'html'\n): (T | ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: ToolkitListNestMode\n): ToolkitNestListsOutputNode<T>[] {\n  const tree: ToolkitNestListsOutputNode<T>[] = []\n  let currentList: ToolkitPortableTextList | undefined\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i]\n    if (!block) {\n      continue\n    }\n\n    if (!isPortableTextListItemBlock(block)) {\n      tree.push(block)\n      currentList = undefined\n      continue\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block)\n      continue\n    }\n\n    // Different list props, are we going deeper?\n    if ((block.level || 1) > currentList.level) {\n      const newList = listFromBlock(block, i, mode)\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items.\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // we actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        const lastListItem = currentList.children[\n          currentList.children.length - 1\n        ] as ToolkitPortableTextListItem\n\n        const newLastChild: ToolkitPortableTextListItem = {\n          ...lastListItem,\n          children: [...lastListItem.children, newList],\n        }\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild\n      } else {\n        ;(currentList as ToolkitPortableTextDirectList).children.push(\n          newList as ToolkitPortableTextDirectList\n        )\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList\n      continue\n    }\n\n    // Different list props, are we going back up the tree?\n    if ((block.level || 1) < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, block)\n      if (match) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, {level: block.level || 1})\n      if (match && match.listItem === block.listItem) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      } else {\n        currentList = listFromBlock(block, i, mode)\n        tree.push(currentList)\n        continue\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block)\n    tree.push(block)\n  }\n\n  return tree\n}\n\nfunction blockMatchesList(block: PortableTextBlock, list: ToolkitPortableTextList) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem\n}\n\nfunction listFromBlock(\n  block: PortableTextListItemBlock,\n  index: number,\n  mode: ToolkitListNestMode\n): ToolkitPortableTextList {\n  return {\n    _type: '@list',\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block],\n  }\n}\n\nfunction findListMatching<T extends TypedObject | PortableTextBlock>(\n  rootNode: T,\n  matching: Partial<PortableTextListItemBlock>\n): ToolkitPortableTextList | undefined {\n  const level = matching.level || 1\n  const style = matching.listItem || 'normal'\n  const filterOnType = typeof matching.listItem === 'string'\n  if (\n    isPortableTextToolkitList(rootNode) &&\n    (rootNode.level || 1) === level &&\n    filterOnType &&\n    (rootNode.listItem || 'normal') === style\n  ) {\n    return rootNode\n  }\n\n  if (!('children' in rootNode)) {\n    return undefined\n  }\n\n  const node = rootNode.children[rootNode.children.length - 1]\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : undefined\n}\n","import type {ToolkitNestedPortableTextSpan} from './types'\nimport {isPortableTextToolkitSpan, isPortableTextToolkitTextNode} from './asserters'\n\n/**\n * Returns the plain-text representation of a\n * {@link ToolkitNestedPortableTextSpan | toolkit-specific Portable Text span}.\n *\n * Useful if you have a subset of nested nodes and want the text from just those,\n * instead of for the entire Portable Text block.\n *\n * @param span - Span node to get text from (Portable Text toolkit specific type)\n * @returns The plain-text version of the span\n */\nexport function spanToPlainText(span: ToolkitNestedPortableTextSpan): string {\n  let text = ''\n  span.children.forEach((current) => {\n    if (isPortableTextToolkitTextNode(current)) {\n      text += current.text\n    } else if (isPortableTextToolkitSpan(current)) {\n      text += spanToPlainText(current)\n    }\n  })\n  return text\n}\n","const allowedProtocols = ['http', 'https', 'mailto', 'tel']\nconst charMap: Record<string, string> = {\n  '&': 'amp',\n  '<': 'lt',\n  '>': 'gt',\n  '\"': 'quot',\n  \"'\": '#x27',\n}\n\nexport function escapeHTML(str: string): string {\n  return str.replace(/[&<>\"']/g, (s) => `&${charMap[s]};`)\n}\n\nexport function uriLooksSafe(uri: string): boolean {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  // Allow hash-links, absolute paths and \"same-protocol\" (//foo.bar) URLs\n  if (first === '#' || first === '/') {\n    return true\n  }\n\n  // If the URL does not contain a `:`, allow it\n  const colonIndex = url.indexOf(':')\n  if (colonIndex === -1) {\n    return true\n  }\n\n  // If the protocol is in the allowed list, treat it as OK\n  const proto = url.slice(0, colonIndex).toLowerCase()\n  if (allowedProtocols.indexOf(proto) !== -1) {\n    return true\n  }\n\n  // If the URL is `site/search?query=author:espen`, allow it\n  const queryIndex = url.indexOf('?')\n  if (queryIndex !== -1 && colonIndex > queryIndex) {\n    return true\n  }\n\n  // If the URL is `site/search#my:encoded:data`, allow it\n  const hashIndex = url.indexOf('#')\n  if (hashIndex !== -1 && colonIndex > hashIndex) {\n    return true\n  }\n\n  return false\n}\n","import type {PortableTextMarkComponent} from '../types'\nimport type {TypedObject} from '@portabletext/types'\nimport {escapeHTML, uriLooksSafe} from '../escape'\n\ninterface DefaultLink extends TypedObject {\n  _type: 'link'\n  href: string\n}\n\nconst link: PortableTextMarkComponent<DefaultLink> = ({children, value}) => {\n  const href = value?.href || ''\n  const looksSafe = uriLooksSafe(href)\n  return looksSafe ? `<a href=\"${escapeHTML(href)}\">${children}</a>` : children\n}\n\nexport const defaultMarks: Record<string, PortableTextMarkComponent | undefined> = {\n  em: ({children}) => `<em>${children}</em>`,\n  strong: ({children}) => `<strong>${children}</strong>`,\n  code: ({children}) => `<code>${children}</code>`,\n  underline: ({children}) => `<span style=\"text-decoration:underline\">${children}</span>`,\n  'strike-through': ({children}) => `<del>${children}</del>`,\n  link,\n}\n","const getTemplate = (type: string, prop: string): string =>\n  `Unknown ${type}, specify a component for it in the \\`components.${prop}\\` option`\n\nexport const unknownTypeWarning = (typeName: string): string =>\n  getTemplate(`block type \"${typeName}\"`, 'types')\n\nexport const unknownMarkWarning = (markType: string): string =>\n  getTemplate(`mark type \"${markType}\"`, 'marks')\n\nexport const unknownBlockStyleWarning = (blockStyle: string): string =>\n  getTemplate(`block style \"${blockStyle}\"`, 'block')\n\nexport const unknownListStyleWarning = (listStyle: string): string =>\n  getTemplate(`list style \"${listStyle}\"`, 'list')\n\nexport const unknownListItemStyleWarning = (listStyle: string): string =>\n  getTemplate(`list item style \"${listStyle}\"`, 'listItem')\n\nexport function printWarning(message: string): void {\n  console.warn(message)\n}\n","import type {PortableTextHtmlComponents} from '../types'\nimport {unknownTypeWarning} from '../warnings'\n\nexport const DefaultUnknownType: PortableTextHtmlComponents['unknownType'] = ({\n  value,\n  isInline,\n}) => {\n  const warning = unknownTypeWarning(value._type)\n  return isInline\n    ? `<span style=\"display:hidden\">${warning}</span>`\n    : `<div style=\"display:hidden\">${warning}</div>`\n}\n\nexport const DefaultUnknownMark: PortableTextHtmlComponents['unknownMark'] = ({\n  markType,\n  children,\n}) => {\n  return `<span class=\"unknown__pt__mark__${markType}\">${children}</span>`\n}\n\nexport const DefaultUnknownBlockStyle: PortableTextHtmlComponents['unknownBlockStyle'] = ({\n  children,\n}) => {\n  return `<p>${children}</p>`\n}\n\nexport const DefaultUnknownList: PortableTextHtmlComponents['unknownList'] = ({children}) => {\n  return `<ul>${children}</ul>`\n}\n\nexport const DefaultUnknownListItem: PortableTextHtmlComponents['unknownListItem'] = ({\n  children,\n}) => {\n  return `<li>${children}</li>`\n}\n","import type {PortableTextBlockComponent, PortableTextHtmlComponents} from '../types'\nimport type {PortableTextBlockStyle} from '@portabletext/types'\nimport {defaultMarks} from './marks'\nimport {defaultLists, DefaultListItem} from './list'\nimport {\n  DefaultUnknownType,\n  DefaultUnknownMark,\n  DefaultUnknownList,\n  DefaultUnknownListItem,\n  DefaultUnknownBlockStyle,\n} from './unknown'\n\nexport const DefaultHardBreak = (): string => '<br/>'\n\nexport const defaultPortableTextBlockStyles: Record<\n  PortableTextBlockStyle,\n  PortableTextBlockComponent | undefined\n> = {\n  normal: ({children}) => `<p>${children}</p>`,\n  blockquote: ({children}) => `<blockquote>${children}</blockquote>`,\n  h1: ({children}) => `<h1>${children}</h1>`,\n  h2: ({children}) => `<h2>${children}</h2>`,\n  h3: ({children}) => `<h3>${children}</h3>`,\n  h4: ({children}) => `<h4>${children}</h4>`,\n  h5: ({children}) => `<h5>${children}</h5>`,\n  h6: ({children}) => `<h6>${children}</h6>`,\n}\n\nexport const defaultComponents: PortableTextHtmlComponents = {\n  types: {},\n\n  block: defaultPortableTextBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle,\n}\n","import type {PortableTextListComponent, PortableTextListItemComponent} from '../types'\n\nexport const defaultLists: Record<'number' | 'bullet', PortableTextListComponent> = {\n  number: ({children}) => `<ol>${children}</ol>`,\n  bullet: ({children}) => `<ul>${children}</ul>`,\n}\n\nexport const DefaultListItem: PortableTextListItemComponent = ({children}) => `<li>${children}</li>`\n","import type {PortableTextHtmlComponents, PortableTextComponents} from '../types'\n\nexport function mergeComponents(\n  parent: PortableTextHtmlComponents,\n  overrides: PortableTextComponents\n): PortableTextHtmlComponents {\n  const {block, list, listItem, marks, types, ...rest} = overrides\n  // @todo figure out how to not `as ...` these\n  return {\n    ...parent,\n    block: mergeDeeply(parent, overrides, 'block') as PortableTextHtmlComponents['block'],\n    list: mergeDeeply(parent, overrides, 'list') as PortableTextHtmlComponents['list'],\n    listItem: mergeDeeply(parent, overrides, 'listItem') as PortableTextHtmlComponents['listItem'],\n    marks: mergeDeeply(parent, overrides, 'marks') as PortableTextHtmlComponents['marks'],\n    types: mergeDeeply(parent, overrides, 'types') as PortableTextHtmlComponents['types'],\n    ...rest,\n  }\n}\n\nfunction mergeDeeply(\n  parent: PortableTextHtmlComponents,\n  overrides: PortableTextComponents,\n  key: 'block' | 'list' | 'listItem' | 'marks' | 'types'\n): PortableTextHtmlComponents[typeof key] {\n  const override = overrides[key]\n  const parentVal = parent[key]\n\n  if (typeof override === 'function') {\n    return override\n  }\n\n  if (override && typeof parentVal === 'function') {\n    return override\n  }\n\n  if (override) {\n    return {...parentVal, ...override} as PortableTextHtmlComponents[typeof key]\n  }\n\n  return parentVal\n}\n","import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\nimport type {\n  MissingComponentHandler,\n  NodeRenderer,\n  PortableTextHtmlComponents,\n  PortableTextOptions,\n  HtmlPortableTextList,\n  Serializable,\n  SerializedBlock,\n} from './types'\nimport {\n  buildMarksTree,\n  isPortableTextBlock,\n  isPortableTextListItemBlock,\n  isPortableTextToolkitList,\n  isPortableTextToolkitSpan,\n  isPortableTextToolkitTextNode,\n  nestLists,\n  spanToPlainText,\n  ToolkitNestedPortableTextSpan,\n  ToolkitTextNode,\n} from '@portabletext/toolkit'\nimport {defaultComponents} from './components/defaults'\nimport {mergeComponents} from './components/merge'\nimport {escapeHTML} from './escape'\nimport {\n  printWarning,\n  unknownBlockStyleWarning,\n  unknownListItemStyleWarning,\n  unknownListStyleWarning,\n  unknownMarkWarning,\n  unknownTypeWarning,\n} from './warnings'\n\nexport function toHTML<B extends TypedObject = PortableTextBlock | ArbitraryTypedObject>(\n  value: B | B[],\n  options: PortableTextOptions = {}\n): string {\n  const {\n    components: componentOverrides,\n    onMissingComponent: missingComponentHandler = printWarning,\n  } = options\n\n  const handleMissingComponent = missingComponentHandler || noop\n  const blocks = Array.isArray(value) ? value : [value]\n  const nested = nestLists(blocks, 'html')\n  const components = componentOverrides\n    ? mergeComponents(defaultComponents, componentOverrides)\n    : defaultComponents\n\n  const renderNode = getNodeRenderer(components, handleMissingComponent)\n  const rendered = nested.map((node, index) =>\n    renderNode({node: node, index, isInline: false, renderNode})\n  )\n\n  return rendered.join('')\n}\n\nconst getNodeRenderer = (\n  components: PortableTextHtmlComponents,\n  handleMissingComponent: MissingComponentHandler\n): NodeRenderer => {\n  function renderNode<N extends TypedObject>(options: Serializable<N>): string {\n    const {node, index, isInline} = options\n\n    if (isPortableTextToolkitList(node)) {\n      return renderList(node, index)\n    }\n\n    if (isPortableTextListItemBlock(node)) {\n      return renderListItem(node, index)\n    }\n\n    if (isPortableTextToolkitSpan(node)) {\n      return renderSpan(node)\n    }\n\n    if (isPortableTextBlock(node)) {\n      return renderBlock(node, index, isInline)\n    }\n\n    if (isPortableTextToolkitTextNode(node)) {\n      return renderText(node)\n    }\n\n    return renderCustomBlock(node, index, isInline)\n  }\n\n  function renderListItem(\n    node: PortableTextListItemBlock<PortableTextMarkDefinition, PortableTextSpan>,\n    index: number\n  ): string {\n    const tree = serializeBlock({node, index, isInline: false, renderNode})\n    const renderer = components.listItem\n    const handler = typeof renderer === 'function' ? renderer : renderer[node.listItem]\n    const itemHandler = handler || components.unknownListItem\n\n    if (itemHandler === components.unknownListItem) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: 'listItemStyle',\n      })\n    }\n\n    let children = tree.children\n    if (node.style && node.style !== 'normal') {\n      // Wrap any other style in whatever the block component says to use\n      const {listItem, ...blockNode} = node\n      children = renderNode({node: blockNode, index, isInline: false, renderNode})\n    }\n\n    return itemHandler({value: node, index, isInline: false, renderNode, children})\n  }\n\n  function renderList(node: HtmlPortableTextList, index: number): string {\n    const children = node.children.map((child, childIndex) =>\n      renderNode({\n        node: child._key ? child : {...child, _key: `li-${index}-${childIndex}`},\n        index: index,\n        isInline: false,\n        renderNode,\n      })\n    )\n\n    const component = components.list\n    const handler = typeof component === 'function' ? component : component[node.listItem]\n    const list = handler || components.unknownList\n\n    if (list === components.unknownList) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListStyleWarning(style), {nodeType: 'listStyle', type: style})\n    }\n\n    return list({value: node, index, isInline: false, renderNode, children: children.join('')})\n  }\n\n  function renderSpan(node: ToolkitNestedPortableTextSpan): string {\n    const {markDef, markType, markKey} = node\n    const span = components.marks[markType] || components.unknownMark\n    const children = node.children.map((child, childIndex) =>\n      renderNode({node: child, index: childIndex, isInline: true, renderNode})\n    )\n\n    if (span === components.unknownMark) {\n      handleMissingComponent(unknownMarkWarning(markType), {nodeType: 'mark', type: markType})\n    }\n\n    return span({\n      text: spanToPlainText(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children: children.join(''),\n    })\n  }\n\n  function renderBlock(node: PortableTextBlock, index: number, isInline: boolean): string {\n    const {_key, ...props} = serializeBlock({node, index, isInline, renderNode})\n    const style = props.node.style || 'normal'\n    const handler =\n      typeof components.block === 'function' ? components.block : components.block[style]\n    const block = handler || components.unknownBlockStyle\n\n    if (block === components.unknownBlockStyle) {\n      handleMissingComponent(unknownBlockStyleWarning(style), {\n        nodeType: 'blockStyle',\n        type: style,\n      })\n    }\n\n    return block({...props, value: props.node, renderNode})\n  }\n\n  function renderText(node: ToolkitTextNode): string {\n    if (node.text === '\\n') {\n      const hardBreak = components.hardBreak\n      return hardBreak ? hardBreak() : '\\n'\n    }\n\n    return escapeHTML(node.text)\n  }\n\n  function renderCustomBlock(value: TypedObject, index: number, isInline: boolean): string {\n    const node = components.types[value._type]\n\n    if (!node) {\n      handleMissingComponent(unknownTypeWarning(value._type), {\n        nodeType: 'block',\n        type: value._type,\n      })\n    }\n\n    const component = node || components.unknownType\n    return component({\n      value,\n      isInline,\n      index,\n      renderNode,\n    })\n  }\n\n  return renderNode\n}\n\nfunction serializeBlock(options: Serializable<PortableTextBlock>): SerializedBlock {\n  const {node, index, isInline, renderNode} = options\n  const tree = buildMarksTree(node)\n  const children = tree.map((child, i) =>\n    renderNode({node: child, isInline: true, index: i, renderNode})\n  )\n\n  return {\n    _key: node._key || `block-${index}`,\n    children: children.join(''),\n    index,\n    isInline,\n    node,\n  }\n}\n\nfunction noop() {\n  // Intentional noop\n}\n","const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n","import htm from 'htm';\r\nimport vhtml from 'vhtml';\r\nimport { toHTML } from '@portabletext/to-html';\r\nimport urlBuilder from '@sanity/image-url';\r\nimport \"./style.css\"\r\n\r\n$(document).ready(function(){\r\n    const html = htm.bind(vhtml);\r\n\r\n    const urlFor = (source) =>\r\n  urlBuilder({ projectId: \"0xlommts\", dataset: \"production\" }).image(source);\r\n    \r\n    let transitionAnimation = \"all 0.5s cubic-bezier(0.75,0,0.45,1)\";\r\n\r\n    function displayCards(q){\r\n        // Select the DOM-element, so that you can replace it with content\r\n        let QUERY = encodeURIComponent(q);\r\n    \r\n        // Compose the URL for your project's endpoint and add the query\r\n        let URL = `https://0xlommts.api.sanity.io/v2021-10-21/data/query/production?query=${QUERY}`;\r\n    \r\n        // fetch the content\r\n        $.get(URL).then(function(response){\r\n            console.log(response);\r\n            response.result.forEach(function(val,i){\r\n                let cardHTML = \"<div class='flex flex-col card--container' data-type='\"+ val._type +\"' data-card-id='\"+ val._id +\"'><img src='https://pccculinary.com/lib/assets/img/\"+ val.imageLink +\"'/><span class='league-font'>\"+ val.title +\"</span></div>\"\r\n                let newCard = document.createElement(\"div\");\r\n                newCard.innerHTML = cardHTML;\r\n                newCard.style.opacity = 0;\r\n                newCard.style.transition = transitionAnimation;\r\n                let $cardGrid = $(\"#card--grid\");\r\n                $cardGrid.append(newCard);\r\n                $cardGrid.children().each(function(i,el){\r\n                    setTimeout(function(){\r\n                        el.style.opacity = 1;\r\n                    },150*i)\r\n                })\r\n            });\r\n        });\r\n    }\r\n    \r\n    \r\n    let $cardGrid = $(\"#card--grid\");\r\n    let $resSel = $(\".resource--selection\");\r\n    selectGeneralSection();\r\n    \r\n    \r\n    //\r\n    // <------------------------ DOWN HERE\r\n    //\r\n    $(\".selection--nav\").click(function(e){\r\n        $resSel.each(function(){\r\n            if (this === e.target.closest(\".resource--selection\")){\r\n                $(this).css({\"transition\": \"all 0.5s linear\", \"border-right\": \"4px solid #D27328\"});\r\n            }\r\n            if (this !== e.target.closest(\".resource--selection\")){\r\n                $(this).css({\"transition\": \"all 0.5s linear\", \"border-right\": \"0px solid #D27328\"});\r\n            }\r\n        })\r\n        selectDeptSection(e.target.innerText.toLowerCase());\r\n    })\r\n    \r\n    //Display General Content OR General Content Selected\r\n    //This is default screen\r\n    function selectGeneralSection(){\r\n        dissolveChildren();\r\n        setTimeout(function(){\r\n            $cardGrid.empty();\r\n            displayCards('*[\"general\" in category]');\r\n            $resSel.eq(0).css({\"transition\": \"all 0.5s linear\", \"border-right\": \"4px solid #D27328\"});\r\n        },700);\r\n    }\r\n    \r\n    function selectDeptSection(eTarget){\r\n        $cardGrid.css(\"display\",\"grid\");\r\n        dissolveChildren();\r\n        setTimeout(function(){\r\n            $cardGrid.empty();\r\n            displayCards('*[\"'+ eTarget +'\" in category]{_id,imageLink,title,_type}');\r\n        },700)\r\n        $(\"#article-container\").empty();\r\n    }\r\n    \r\n    function dissolveChildren(){\r\n        $cardGrid.children().each(function(i,val){\r\n            $(val).css('transition',transitionAnimation)\r\n            setTimeout(function(){\r\n                $(val).css('opacity','0')\r\n            },150*i)\r\n        })\r\n    }\r\n\r\n    //Select the card\r\n    $cardGrid.on(\"click\",function(e){\r\n        if ($(e.target).parent().data().type == 'article') {\r\n            //render article\r\n            console.log($(e.target).parent().data().cardId);\r\n            // Make the cards disappear\r\n            dissolveChildren();\r\n            setTimeout(function(){\r\n                $cardGrid.css({\"height\":\"0vh\",\"transition\":transitionAnimation});\r\n            },700);\r\n            setTimeout(function(){\r\n                $cardGrid.css(\"display\",\"none\");\r\n            },800);\r\n            displayArticle(\"*[_id == '\"+ $(e.target).parent().data().cardId +\"']\")\r\n        }\r\n    })\r\n\r\n    function displayArticle(y){\r\n        // Select the DOM-element, so that you can replace it with content\r\n        let QUERY = encodeURIComponent(y);\r\n    \r\n        // Compose the URL for your project's endpoint and add the query\r\n        let URL = `https://0xlommts.api.sanity.io/v2021-10-21/data/query/production?query=${QUERY}`;\r\n\r\n        // Translate the JSON file from PortableText into HTML\r\n        $.get(URL).then(function (response) {\r\n            console.log(response);\r\n            let articleTitleText = document.createElement(\"h1\");\r\n            articleTitleText.innerText = (response[\"result\"][0].title);\r\n            $(articleTitleText).addClass(\"text-5xl font-bold mb-2\");\r\n            let portableTextBlocks = response[\"result\"][0].body;\r\n            let articleDiv = document.createElement(\"div\");\r\n            articleDiv.innerHTML = toHTML(\r\n              portableTextBlocks,\r\n              /* array of portable text blocks */\r\n              {\r\n                components: {\r\n                  types: {\r\n                    figure: ({ value }) =>\r\n                      html`<figure>\r\n                        <img src=${urlFor(value[\"image\"][\"asset\"])} alt=${value.alt} />\r\n                      </figure>`\r\n                  },\r\n                }\r\n              }\r\n            );\r\n            setTimeout(function(){\r\n                document.getElementById(\"article-container\").append(articleTitleText);\r\n                document.getElementById(\"article-container\").append(articleDiv);\r\n            },500);\r\n          });\r\n    }\r\n\r\n    // REACT\r\n    \r\n    \r\n    //\r\n    //\r\n    // END BEFORE HERE\r\n    //\r\n    //\r\n})\r\n\r\n"],"names":["$46eb45435212d36d$var$n","t1","s","r","e","u","h","length","p","a","Object","assign","apply","push","$46eb45435212d36d$var$t","Map","$46eb45435212d36d$export$2e2bcd8739ae039","s1","r1","get","this","set","n1","t2","n2","replace","l","arguments","emptyTags","esc","str","String","map","setInnerHTMLAttr","DOMAttributeNames","className","htmlFor","sanitized","name","attrs","stack","i","children","reverse","indexOf","__html","child","pop","$3852a73122938481$export$d012f6896edcd28d","node","_type","text","marks","Array","isArray","every","mark","$3852a73122938481$export$df668eac6380d143","markDefs","def","_key","$3852a73122938481$export$8dbdbcaa0f6e8b74","block","listItem","level","$3852a73122938481$export$79b0102375139afb","$3852a73122938481$export$4d52060edeb7d6b4","span","$3852a73122938481$export$ddc4d2d020259172","$3852a73122938481$var$knownDecorators","$3852a73122938481$export$a1e8d046f6da61dc","index","blockChildren","slice","occurences","forEach","siblingIndex","sibling","sort","markA","markB","aOccurences","bOccurences","aKnownPos","bKnownPos","localeCompare","$3852a73122938481$var$sortMarks","$3852a73122938481$export$e691ea2ff0124023","sortedMarks","rootNode","markType","nodeStack","marksNeeded","pos","_a","markKey","splice","currentNode","markDef","find","lines","split","line","concat","$3852a73122938481$export$e5dfa45892113fc","blocks","mode","tree","currentList","$3852a73122938481$var$blockMatchesList","newList","$3852a73122938481$var$listFromBlock","lastListItem","newLastChild","$3852a73122938481$var$__spreadValues","matchingBranch","match","$3852a73122938481$var$findListMatching","console","warn","list","matching","style","filterOnType","$3852a73122938481$export$950a093a85d6079f","current","$6c3b52dbd4c87a6f$var$allowedProtocols","$6c3b52dbd4c87a6f$var$charMap","$6c3b52dbd4c87a6f$export$5dd27816c66fb702","$6c3b52dbd4c87a6f$var$getTemplate","type","prop","$6c3b52dbd4c87a6f$var$unknownTypeWarning","typeName","$6c3b52dbd4c87a6f$var$printWarning","message","$6c3b52dbd4c87a6f$export$71abc632aa29e6fe","types","normal","blockquote","h1","h2","h3","h4","h5","h6","em","strong","code","underline","value","href","uri","url","trim","first","charAt","colonIndex","proto","toLowerCase","queryIndex","hashIndex","$6c3b52dbd4c87a6f$export$875d0b8e85bf24db","number","bullet","hardBreak","unknownType","isInline","warning","unknownMark","unknownList","unknownListItem","unknownBlockStyle","$6c3b52dbd4c87a6f$var$mergeDeeply","parent","overrides","key","override","parentVal","$6c3b52dbd4c87a6f$var$__spreadValues","$6c3b52dbd4c87a6f$export$438fa7935f716bdf","options","components","componentOverrides","onMissingComponent","missingComponentHandler","handleMissingComponent","$6c3b52dbd4c87a6f$var$noop","nested","rest","$6c3b52dbd4c87a6f$var$__objRest","$6c3b52dbd4c87a6f$var$__spreadProps","$6c3b52dbd4c87a6f$export$4d55af2ed2de18b4","renderNode","$6c3b52dbd4c87a6f$var$getNodeRenderer","join","childIndex","component","nodeType","renderList","$6c3b52dbd4c87a6f$var$serializeBlock","renderer","itemHandler","renderListItem","$6c3b52dbd4c87a6f$var$unknownMarkWarning","renderSpan","props","blockStyle","renderBlock","renderText","renderCustomBlock","const","example","parseAssetId","ref","ref$1","id","dimensionString","format","Error","ref$2","width","imgWidthStr","height","imgHeightStr","isFinite","isRef","src","_ref","isAsset","_id","isAssetStub","source","asset","parseSource","image","isUrl","urlToId","img","crop","hotspot","applyDefaults","test","result","left","top","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","spec","JSON","stringify","cropLeft","Math","round","cropTop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","rect","focalPoint","ignoreImageParams","fit","specToImageUrl","cdnUrl","baseUrl","filename","projectId","dataset","params","bg","flip","flipHorizontal","flipVertical","filter","Boolean","mapping","specName","param","encodeURIComponent","cropRect","imgWidth","imgHeight","desiredAspectRatio","max","hotspotXCenter","hotspotYCenter","validFits","validCrops","validAutoModes","isSanityClientLike","client","clientConfig","rewriteSpecName","specs","entry","urlBuilder","apiUrl","ImageUrlBuilder","constructor","withOptions","newOptions","hasOwnProperty","dpr","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","saturation","auto","pad","toString","$","document","ready","html","bind","$parcel$interopDefault","$fac1a7058f52225b$exports","transitionAnimation","displayCards","q","URL","then","response","log","val","i1","cardHTML","imageLink","title","newCard","createElement","innerHTML","opacity","transition","$cardGrid","append","each","el","setTimeout","$cardGrid1","$resSel","dissolveChildren","css","empty","eq","click","eTarget","target","closest","innerText","on","data","cardId","articleTitleText","addClass","portableTextBlocks","body","articleDiv","figure","$db56f5a91532e5ff$exports","alt","getElementById","displayArticle"],"version":3,"file":"index.054ded0c.js.map"}